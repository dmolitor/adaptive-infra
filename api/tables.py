from typing import List
from sqlmodel import Field, Relationship, SQLModel

"""
This script creates data models for each table in the database.
"""

class Bandit(SQLModel, table=True):
    """
    A class for creating and working with the `bandit` table in Postgres.

    id: A unique ID (auto-generated by SQLModel)
    label: The label of the bandit arm (same as `ResponseJSON.choice`)
    parameters: A list of the arm's Bernoulli (p) param's Beta params over time
    """
    id: int | None = Field(default=None, primary_key=True)
    label: str
    parameters: List["Parameters"] = Relationship(back_populates="arm")
    meta: List["Metadata"] = Relationship(back_populates="arm")
    pi: List["Pi"] = Relationship(back_populates="arm")
    responses: List["Response"] = Relationship(back_populates="arm")

class Batch(SQLModel, table=True):
    """
    A database table for recording the batch sizes and responses.
    """
    id: int | None = Field(default=None, primary_key=True)
    remaining: int | None
    active: bool
    pi: List["Pi"] = Relationship(back_populates="batch")
    parameters: List["Parameters"] = Relationship(back_populates="batch")
    responses: List["Response"] = Relationship(back_populates="batch")
    noconsent: List["NoConsent"] = Relationship(back_populates="batch")

class Metadata(SQLModel, table=True):
    """
    A class for representing all the metadata that goes along with
    each Bandit arm (aka context).
    """
    id: int | None = Field(default=None, primary_key=True)
    arm_id: int = Field(foreign_key="bandit.id")
    name: str
    age: int
    political_experience: str
    career_experience: str
    arm: Bandit = Relationship(back_populates="meta")

class NoConsent(SQLModel, table=True):
    """
    A class for creating and working with the `noconsent` table in Postgres.

    id: A unique user ID (auto-generated by SQLModel)
    consent: Does the user consent to the study
    batch_id: Which batch does this user belong to
    """
    id: int | None = Field(default=None, primary_key=True)
    batch_id: int = Field(foreign_key="batch.id")
    consent: bool
    batch: Batch = Relationship(back_populates="noconsent")

class Parameters(SQLModel, table=True):
    """
    A class for working with the `parameters` table in Postgres.
    Each arm is a Bernoulli distribution indexed by parameter theta.
    Theta is assumed to be Beta distributed indexed by parameters alpha
    and beta. For each user submission we will store the current posterior
    parameter values for each arm's theta.

    id: A unique ID (auto-generated)
    arm_id: The corresponding bandit arm the parameters correspond to
    alpha: The corresponding arm's alpha parameter value
    beta: The corresponding arm's beta parameter value
    """
    id: int | None = Field(default=None, primary_key=True)
    arm_id: int = Field(foreign_key="bandit.id")
    batch_id: int = Field(foreign_key="batch.id")
    alpha: int = 1
    beta: int = 1
    arm: Bandit = Relationship(back_populates="parameters")
    batch: Batch = Relationship(back_populates="parameters")

class Pi(SQLModel, table=True):
    """
    A class for recording the percentage of 1000 realizations in which
    each arm is the most (or least) discriminatory arm.
    """
    id: int | None = Field(default=None, primary_key=True)
    batch_id: int = Field(foreign_key="batch.id")
    arm_id: int = Field(foreign_key="bandit.id")
    pi: float
    arm: Bandit = Relationship(back_populates="pi")
    batch: "Batch" = Relationship(back_populates="pi")

class Response(SQLModel, table=True):
    """
    A class for creating and working with the `response` table in Postgres.

    id: A unique user ID (auto-generated by SQLModel)
    consent: Does the user consent to the study
    prolific_id: User's prolific ID
    in_usa: Are they located in the U.S.?
    commitment: Do they commit to providing thoughful answers?
    captcha: Verifying they are a real person
    candidate_preference: Which candidate they prefer
    candidate_older: Attention check; which candidate is older?
    age: Demographics
    race: Demographics
    ethnicity: Demographics
    sex: Demographics
    """
    id: int | None = Field(default=None, primary_key=True)
    arm_id: int = Field(foreign_key="bandit.id")
    batch_id: int = Field(foreign_key="batch.id")
    context_batch_id: int
    consent: bool
    prolific_id: str | None
    in_usa: bool | None
    commitment: str | None
    captcha: str | None
    candidate_preference: int | None
    candidate_older: int | None
    candidate_older_truth: int | None
    age: int | None
    race: str | None
    ethnicity: str | None
    sex: str | None
    discriminated: bool | None
    garbage: bool
    arm: Bandit = Relationship(back_populates="responses")
    batch: "Batch" = Relationship(back_populates="responses")