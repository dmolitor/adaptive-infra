from pydantic import BaseModel
from typing import List, Optional
from sqlmodel import Field, Relationship, SQLModel

"""
This script creates data validation models for the API and constructs
tables to insert and work with the data in the Postgres db.
"""


class ChoicesJSON(BaseModel):
    """
    A class for validating choices data submitted via the API

    choices: A list of choices
    distribution: A string specifying each choice's parameter distribution
    params: A dictionary of initial parameters for the distributions (see above)
            e.g. {'a': 1, 'b': 1} for a Beta(1, 1) prior distribution.
    """

    choices: List[str]
    distribution: str
    params: dict


class ResponseJSON(BaseModel):
    """
    A class for validating response data submitted via the API

    choice: A string specifying which cartoon the user selected
    """

    choice: str


class Choice(SQLModel, table=True):
    """
    A class for creating and working with the `choice` table in Postgres.

    id: A unique ID (auto-generated by SQLModel)
    item: A string stating the name of the item (same as `ResponseJSON.choice`)
    distribution: A string specifying the item's parameter distribution
    parameter: A value randomly drawn from the current distribution
        (parameterized by `successes` and `failures` see below)
    successes: The number of times the item has been picked by the user
    failures: The number of times the item has been rejected in favor of
        the other option
    responses: A list of all responses that picked each respective item
    """

    id: int | None = Field(default=None, primary_key=True)
    item: str
    distribution: str
    parameter: float
    successes: int | None = 0
    failures: int | None = 0
    responses: List["Response"] = Relationship(back_populates="choice")


class ChoiceUpdate(SQLModel):
    """
    A class for updating elements of the `choice` table in Postgres.
    The only fields that will ever get updated are `parameter`, `successes`,
    and `failures`
    """

    item: Optional[str] = None
    parameter: Optional[float] = None
    successes: Optional[int] = None
    failures: Optional[int] = None


class Response(SQLModel, table=True):
    """
    A class for creating and working with the `response` table in Postgres.

    id: A unique ID (auto-generated by SQLModel)
    choice_id: A string that links each Response to the Choice table.
    choice: The choice object that each response is linked to.
    """

    id: int | None = Field(default=None, primary_key=True)
    choice_id: int = Field(foreign_key="choice.id")
    choice: Choice = Relationship(back_populates="responses")
